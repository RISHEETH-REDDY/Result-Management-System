# -*- coding: utf-8 -*-
"""Result Management System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fz2e5HgFiiVLTN_JehUTuU_Vxi9GiF7B
"""

!pip install pyspark

import pandas as pd
import numpy as np
from faker import Faker

# Initialize Faker for Indian names
fake = Faker("en_IN")

# Define Subjects
subjects = ['Electronics', 'Programming', 'Database', 'Data Science', 'Mathematics', 'DSA']

# Generate 10,000 student profiles
num_students = 10000
unique_names = set()

# Generate unique names
while len(unique_names) < num_students:
    unique_names.add(fake.name())

unique_names = list(unique_names)

# Create student data
student_data = {
    "Student_ID": np.arange(1, 1 + num_students),
    "Name": unique_names,
}

# Generate random marks for each subject
for subject in subjects:
    student_data[subject] = np.random.randint(0, 95, num_students)  # Marks range 30-100

# Convert to DataFrame
df = pd.DataFrame(student_data)

# Save as CSV
df.to_csv("students_data.csv", index=False)

print("Student Data Generated Successfully!")

from pyspark.sql import SparkSession
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
spark = SparkSession.builder.appName("Result Management System").getOrCreate()
df=pd.read_csv('students_data.csv')

df_spark = spark.createDataFrame(df)

df_spark.printSchema()
df_spark.describe().show()

from pyspark.sql.functions import avg, col

subjects = ["Electronics", "Programming", "Database", "Data Science", "Mathematics", "DSA"]

df_spark.select([avg(col(subject)).alias(f"Avg_{subject}") for subject in subjects]).show()

from pyspark.sql.functions import max, min

df_spark.select([max(col(subject)).alias(f"Max_{subject}") for subject in subjects]).show()

df_spark.select([min(col(subject)).alias(f"Min_{subject}") for subject in subjects]).show()

from pyspark.sql.functions import count, when

pass_criteria = 40

pass_counts = df_spark.select([(count(when(col(subject) >= pass_criteria, subject)) * 100 / df_spark.count()).alias(f"Pass_Percentage_{subject}") for subject in subjects])
pass_counts.show()

from pyspark.sql.functions import col
import pyspark.sql.functions as F

# Ensure you use the correct column names
for subject in subjects:
    top_performers = df_spark.orderBy(F.col(subject).desc()).select("Student_ID", "Name", subject).limit(5)
    print(f"Top performers in {subject}:")
    top_performers.show()

df_pandas = df_spark.toPandas()

import matplotlib.pyplot as plt
import seaborn as sns

avg_marks = df_pandas[subjects].mean()

plt.figure(figsize=(10, 5))
plt.bar(subjects, avg_marks, color=['purple', 'green', 'red', 'blue', 'orange', 'brown'])
plt.xlabel("Subjects")
plt.ylabel("Average Marks")
plt.title("Average Marks per Subject")
plt.show()

df_spark.select([col(subject).cast("double") for subject in subjects]).summary("mean").show()

for sub1 in subjects:
    for sub2 in subjects:
        if sub1 != sub2:
            print(f"Correlation between {sub1} and {sub2}: {df_spark.stat.corr(sub1, sub2)}")

import matplotlib.pyplot as plt

df_pandas = df_spark.toPandas()

plt.figure(figsize=(10, 5))
plt.hist(df_pandas["Average_Marks"], bins=10, color="lightblue", edgecolor="black")
plt.xlabel("Marks Range")
plt.ylabel("Number of Students")
plt.title("Performance Distribution of Students")
plt.show()

plt.figure(figsize=(10, 6))
corr_matrix = df[['Electronics', 'Programming', 'Database', 'Data Science', 'Mathematics', 'DSA']].corr()
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", linewidths=0.5)
plt.title("Correlation Heatmap of Subjects")
plt.show()

plt.figure(figsize=(12, 10))
for i in range(len(subjects)):
    for j in range(i + 1, len(subjects)):
        plt.figure(figsize=(8, 6))
        sns.scatterplot(x=df[subjects[i]], y=df[subjects[j]], hue=df[subjects[i]], palette='coolwarm')
        plt.title(f'Scatter Plot: {subjects[i]} vs. {subjects[j]}')
        plt.xlabel(f'{subjects[i]} Marks')
        plt.ylabel(f'{subjects[j]} Marks')
        plt.legend(title=f'{subjects[i]} Marks')
        plt.show()

plt.figure(figsize=(12, 6))
sns.boxplot(data=df[['Electronics', 'Programming', 'Database', 'Data Science', 'Mathematics', 'DSA']])
plt.title("Box Plot of Marks Distribution Across Subjects")
plt.xlabel("Subjects")
plt.ylabel("Marks")
plt.show()

plt.figure(figsize=(10, 5))
sns.histplot(df['Total Marks'], bins=20, kde=True, color='blue')
plt.title("Distribution of Total Marks")
plt.xlabel("Total Marks")
plt.ylabel("Frequency")
plt.show()

subjects = ['Electronics', 'Programming', 'Database', 'Data Science', 'Mathematics', 'DSA']
for subject in subjects:
    top_students_subject = df.nlargest(10, subject)
    plt.figure(figsize=(3, 3))
    plt.pie(top_students_subject[subject], labels=top_students_subject['Name'], autopct='%1.1f%%', startangle=140)
    plt.title(f"Top 10 Students in {subject}")
    plt.show()

plt.figure(figsize=(12, 10))
for i, subject in enumerate(subjects, 1):
    plt.subplot(3, 2, i)
    sns.histplot(df[subject], bins=10, kde=False, color='b')
    plt.title(f'Distribution of {subject} Marks')
    plt.xlabel('Marks')
    plt.ylabel('Frequency')

plt.tight_layout()
plt.show()